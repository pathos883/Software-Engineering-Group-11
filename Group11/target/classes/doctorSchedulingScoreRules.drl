import Schedule.Shift;
import Schedule.Request;
import Schedule.Doctor;
import Schedule.DoctorSchedule;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import java.util.Date;
import java.time.Duration;

global HardSoftScoreHolder scoreHolder;

//hard constraints
//consecutive shifts
rule "consecutive shifts"
    when
        //get 2 shifts
        $shift1 : Shift($endTime : endTime)
        $shift2 : Shift($startTime : startTime)

    then
        //check if the shifts have the same start and endtime
        if($endTime == $startTime){
            //check if the shifts have the same doctor
            if($shift1.getShiftDoctor() == $shift2.getShiftDoctor()){
                //stop
                   scoreHolder.addHardConstraintMatch(kcontext, - 10000);
            }
        }

end

//soft constraints
//requests
rule "request match"
    when
        //shift contains a doctor
        $shift : Shift($doctor : shiftDoctor)
        //exists Shift(shiftDoctor == $doctor)
    then
        //check if any of the doctors requests overlap with the shift
        for(Request r : $doctor.getShiftRequests()){
           //if the request overlaps the shift
           if((r.getStart().isBefore($shift.getEndTime()))&&(r.getEnd().isAfter($shift.getStartTime()))){
               int duration;
               //check to increment or decrement
               if(r.getWanted()){
                   //increment the score
                   scoreHolder.addSoftConstraintMatch(kcontext, + r.getPriority());

                   //get the time of the shift in hours
                   duration = (int) (Duration.between($shift.getStartTime() , $shift.getEndTime()).toHours());

                   //decrement the hours to work by the hours in the shift
                   $doctor.setHoursToWork($doctor.getHoursToWork() - duration);
               }
               else{
                   //decrement the score
                   scoreHolder.addSoftConstraintMatch(kcontext, - r.getPriority());

                   //get the time of the shift in hours
                   duration = (int) (Duration.between($shift.getStartTime() , $shift.getEndTime()).toHours());

                   //decrement the hours to work by the hours in the shift
                   $doctor.setHoursToWork($doctor.getHoursToWork() - duration);
               }

               //break
               break;
           }
        }
end

//hours toward quota
rule "hours quota"
    when
        //get how many hours the doctor has worked
        $doctor : Doctor($hours : hoursToWork)
        //exists Doctor(hoursWorked == $hours)

    then
        //if doctors hours are greater than 0
        if($hours > 0){
            //subtract score based on underworked hours
            scoreHolder.addSoftConstraintMatch(kcontext, - $hours);
        }
        //otherwise
        else{
            //subtract score based on overworked hours
            scoreHolder.addSoftConstraintMatch(kcontext, + $hours);
        }
end